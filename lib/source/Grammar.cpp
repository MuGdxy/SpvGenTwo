// Auto generated - do not modify
#include "spvgentwo/Grammar.h"

using namespace spvgentwo;

Grammar::Grammar(IAllocator* _pAllocator) : m_instructions(_pAllocator)
{
	m_instructions.emplaceUnique(spv::Op::OpNop, Instruction{"OpNop", spv::Op::OpNop, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUndef, Instruction{"OpUndef", spv::Op::OpUndef, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSourceContinued, Instruction{"OpSourceContinued", spv::Op::OpSourceContinued, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSource, Instruction{"OpSource", spv::Op::OpSource, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSourceExtension, Instruction{"OpSourceExtension", spv::Op::OpSourceExtension, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpName, Instruction{"OpName", spv::Op::OpName, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMemberName, Instruction{"OpMemberName", spv::Op::OpMemberName, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpString, Instruction{"OpString", spv::Op::OpString, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLine, Instruction{"OpLine", spv::Op::OpLine, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExtension, Instruction{"OpExtension", spv::Op::OpExtension, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExtInstImport, Instruction{"OpExtInstImport", spv::Op::OpExtInstImport, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExtInst, Instruction{"OpExtInst", spv::Op::OpExtInst, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMemoryModel, Instruction{"OpMemoryModel", spv::Op::OpMemoryModel, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEntryPoint, Instruction{"OpEntryPoint", spv::Op::OpEntryPoint, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExecutionMode, Instruction{"OpExecutionMode", spv::Op::OpExecutionMode, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCapability, Instruction{"OpCapability", spv::Op::OpCapability, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeVoid, Instruction{"OpTypeVoid", spv::Op::OpTypeVoid, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeBool, Instruction{"OpTypeBool", spv::Op::OpTypeBool, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeInt, Instruction{"OpTypeInt", spv::Op::OpTypeInt, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeFloat, Instruction{"OpTypeFloat", spv::Op::OpTypeFloat, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeVector, Instruction{"OpTypeVector", spv::Op::OpTypeVector, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeMatrix, Instruction{"OpTypeMatrix", spv::Op::OpTypeMatrix, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeImage, Instruction{"OpTypeImage", spv::Op::OpTypeImage, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeSampler, Instruction{"OpTypeSampler", spv::Op::OpTypeSampler, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeSampledImage, Instruction{"OpTypeSampledImage", spv::Op::OpTypeSampledImage, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeArray, Instruction{"OpTypeArray", spv::Op::OpTypeArray, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeRuntimeArray, Instruction{"OpTypeRuntimeArray", spv::Op::OpTypeRuntimeArray, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeStruct, Instruction{"OpTypeStruct", spv::Op::OpTypeStruct, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeOpaque, Instruction{"OpTypeOpaque", spv::Op::OpTypeOpaque, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypePointer, Instruction{"OpTypePointer", spv::Op::OpTypePointer, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeFunction, Instruction{"OpTypeFunction", spv::Op::OpTypeFunction, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeEvent, Instruction{"OpTypeEvent", spv::Op::OpTypeEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeDeviceEvent, Instruction{"OpTypeDeviceEvent", spv::Op::OpTypeDeviceEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeReserveId, Instruction{"OpTypeReserveId", spv::Op::OpTypeReserveId, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeQueue, Instruction{"OpTypeQueue", spv::Op::OpTypeQueue, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypePipe, Instruction{"OpTypePipe", spv::Op::OpTypePipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeForwardPointer, Instruction{"OpTypeForwardPointer", spv::Op::OpTypeForwardPointer, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstantTrue, Instruction{"OpConstantTrue", spv::Op::OpConstantTrue, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstantFalse, Instruction{"OpConstantFalse", spv::Op::OpConstantFalse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstant, Instruction{"OpConstant", spv::Op::OpConstant, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstantComposite, Instruction{"OpConstantComposite", spv::Op::OpConstantComposite, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstantSampler, Instruction{"OpConstantSampler", spv::Op::OpConstantSampler, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConstantNull, Instruction{"OpConstantNull", spv::Op::OpConstantNull, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSpecConstantTrue, Instruction{"OpSpecConstantTrue", spv::Op::OpSpecConstantTrue, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSpecConstantFalse, Instruction{"OpSpecConstantFalse", spv::Op::OpSpecConstantFalse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSpecConstant, Instruction{"OpSpecConstant", spv::Op::OpSpecConstant, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSpecConstantComposite, Instruction{"OpSpecConstantComposite", spv::Op::OpSpecConstantComposite, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSpecConstantOp, Instruction{"OpSpecConstantOp", spv::Op::OpSpecConstantOp, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunction, Instruction{"OpFunction", spv::Op::OpFunction, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunctionParameter, Instruction{"OpFunctionParameter", spv::Op::OpFunctionParameter, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunctionEnd, Instruction{"OpFunctionEnd", spv::Op::OpFunctionEnd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunctionCall, Instruction{"OpFunctionCall", spv::Op::OpFunctionCall, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVariable, Instruction{"OpVariable", spv::Op::OpVariable, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageTexelPointer, Instruction{"OpImageTexelPointer", spv::Op::OpImageTexelPointer, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLoad, Instruction{"OpLoad", spv::Op::OpLoad, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpStore, Instruction{"OpStore", spv::Op::OpStore, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCopyMemory, Instruction{"OpCopyMemory", spv::Op::OpCopyMemory, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCopyMemorySized, Instruction{"OpCopyMemorySized", spv::Op::OpCopyMemorySized, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAccessChain, Instruction{"OpAccessChain", spv::Op::OpAccessChain, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpInBoundsAccessChain, Instruction{"OpInBoundsAccessChain", spv::Op::OpInBoundsAccessChain, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpPtrAccessChain, Instruction{"OpPtrAccessChain", spv::Op::OpPtrAccessChain, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpArrayLength, Instruction{"OpArrayLength", spv::Op::OpArrayLength, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGenericPtrMemSemantics, Instruction{"OpGenericPtrMemSemantics", spv::Op::OpGenericPtrMemSemantics, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpInBoundsPtrAccessChain, Instruction{"OpInBoundsPtrAccessChain", spv::Op::OpInBoundsPtrAccessChain, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDecorate, Instruction{"OpDecorate", spv::Op::OpDecorate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMemberDecorate, Instruction{"OpMemberDecorate", spv::Op::OpMemberDecorate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDecorationGroup, Instruction{"OpDecorationGroup", spv::Op::OpDecorationGroup, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupDecorate, Instruction{"OpGroupDecorate", spv::Op::OpGroupDecorate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupMemberDecorate, Instruction{"OpGroupMemberDecorate", spv::Op::OpGroupMemberDecorate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVectorExtractDynamic, Instruction{"OpVectorExtractDynamic", spv::Op::OpVectorExtractDynamic, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVectorInsertDynamic, Instruction{"OpVectorInsertDynamic", spv::Op::OpVectorInsertDynamic, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVectorShuffle, Instruction{"OpVectorShuffle", spv::Op::OpVectorShuffle, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCompositeConstruct, Instruction{"OpCompositeConstruct", spv::Op::OpCompositeConstruct, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCompositeExtract, Instruction{"OpCompositeExtract", spv::Op::OpCompositeExtract, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCompositeInsert, Instruction{"OpCompositeInsert", spv::Op::OpCompositeInsert, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCopyObject, Instruction{"OpCopyObject", spv::Op::OpCopyObject, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTranspose, Instruction{"OpTranspose", spv::Op::OpTranspose, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSampledImage, Instruction{"OpSampledImage", spv::Op::OpSampledImage, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleImplicitLod, Instruction{"OpImageSampleImplicitLod", spv::Op::OpImageSampleImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleExplicitLod, Instruction{"OpImageSampleExplicitLod", spv::Op::OpImageSampleExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleDrefImplicitLod, Instruction{"OpImageSampleDrefImplicitLod", spv::Op::OpImageSampleDrefImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleDrefExplicitLod, Instruction{"OpImageSampleDrefExplicitLod", spv::Op::OpImageSampleDrefExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleProjImplicitLod, Instruction{"OpImageSampleProjImplicitLod", spv::Op::OpImageSampleProjImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleProjExplicitLod, Instruction{"OpImageSampleProjExplicitLod", spv::Op::OpImageSampleProjExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleProjDrefImplicitLod, Instruction{"OpImageSampleProjDrefImplicitLod", spv::Op::OpImageSampleProjDrefImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleProjDrefExplicitLod, Instruction{"OpImageSampleProjDrefExplicitLod", spv::Op::OpImageSampleProjDrefExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageFetch, Instruction{"OpImageFetch", spv::Op::OpImageFetch, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageGather, Instruction{"OpImageGather", spv::Op::OpImageGather, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageDrefGather, Instruction{"OpImageDrefGather", spv::Op::OpImageDrefGather, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageRead, Instruction{"OpImageRead", spv::Op::OpImageRead, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageWrite, Instruction{"OpImageWrite", spv::Op::OpImageWrite, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImage, Instruction{"OpImage", spv::Op::OpImage, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQueryFormat, Instruction{"OpImageQueryFormat", spv::Op::OpImageQueryFormat, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQueryOrder, Instruction{"OpImageQueryOrder", spv::Op::OpImageQueryOrder, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQuerySizeLod, Instruction{"OpImageQuerySizeLod", spv::Op::OpImageQuerySizeLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQuerySize, Instruction{"OpImageQuerySize", spv::Op::OpImageQuerySize, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQueryLod, Instruction{"OpImageQueryLod", spv::Op::OpImageQueryLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQueryLevels, Instruction{"OpImageQueryLevels", spv::Op::OpImageQueryLevels, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageQuerySamples, Instruction{"OpImageQuerySamples", spv::Op::OpImageQuerySamples, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertFToU, Instruction{"OpConvertFToU", spv::Op::OpConvertFToU, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertFToS, Instruction{"OpConvertFToS", spv::Op::OpConvertFToS, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertSToF, Instruction{"OpConvertSToF", spv::Op::OpConvertSToF, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertUToF, Instruction{"OpConvertUToF", spv::Op::OpConvertUToF, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUConvert, Instruction{"OpUConvert", spv::Op::OpUConvert, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSConvert, Instruction{"OpSConvert", spv::Op::OpSConvert, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFConvert, Instruction{"OpFConvert", spv::Op::OpFConvert, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpQuantizeToF16, Instruction{"OpQuantizeToF16", spv::Op::OpQuantizeToF16, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertPtrToU, Instruction{"OpConvertPtrToU", spv::Op::OpConvertPtrToU, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSatConvertSToU, Instruction{"OpSatConvertSToU", spv::Op::OpSatConvertSToU, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSatConvertUToS, Instruction{"OpSatConvertUToS", spv::Op::OpSatConvertUToS, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpConvertUToPtr, Instruction{"OpConvertUToPtr", spv::Op::OpConvertUToPtr, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpPtrCastToGeneric, Instruction{"OpPtrCastToGeneric", spv::Op::OpPtrCastToGeneric, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGenericCastToPtr, Instruction{"OpGenericCastToPtr", spv::Op::OpGenericCastToPtr, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGenericCastToPtrExplicit, Instruction{"OpGenericCastToPtrExplicit", spv::Op::OpGenericCastToPtrExplicit, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitcast, Instruction{"OpBitcast", spv::Op::OpBitcast, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSNegate, Instruction{"OpSNegate", spv::Op::OpSNegate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFNegate, Instruction{"OpFNegate", spv::Op::OpFNegate, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIAdd, Instruction{"OpIAdd", spv::Op::OpIAdd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFAdd, Instruction{"OpFAdd", spv::Op::OpFAdd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpISub, Instruction{"OpISub", spv::Op::OpISub, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFSub, Instruction{"OpFSub", spv::Op::OpFSub, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIMul, Instruction{"OpIMul", spv::Op::OpIMul, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFMul, Instruction{"OpFMul", spv::Op::OpFMul, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUDiv, Instruction{"OpUDiv", spv::Op::OpUDiv, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSDiv, Instruction{"OpSDiv", spv::Op::OpSDiv, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFDiv, Instruction{"OpFDiv", spv::Op::OpFDiv, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUMod, Instruction{"OpUMod", spv::Op::OpUMod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSRem, Instruction{"OpSRem", spv::Op::OpSRem, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSMod, Instruction{"OpSMod", spv::Op::OpSMod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFRem, Instruction{"OpFRem", spv::Op::OpFRem, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFMod, Instruction{"OpFMod", spv::Op::OpFMod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVectorTimesScalar, Instruction{"OpVectorTimesScalar", spv::Op::OpVectorTimesScalar, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMatrixTimesScalar, Instruction{"OpMatrixTimesScalar", spv::Op::OpMatrixTimesScalar, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpVectorTimesMatrix, Instruction{"OpVectorTimesMatrix", spv::Op::OpVectorTimesMatrix, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMatrixTimesVector, Instruction{"OpMatrixTimesVector", spv::Op::OpMatrixTimesVector, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMatrixTimesMatrix, Instruction{"OpMatrixTimesMatrix", spv::Op::OpMatrixTimesMatrix, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpOuterProduct, Instruction{"OpOuterProduct", spv::Op::OpOuterProduct, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDot, Instruction{"OpDot", spv::Op::OpDot, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIAddCarry, Instruction{"OpIAddCarry", spv::Op::OpIAddCarry, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpISubBorrow, Instruction{"OpISubBorrow", spv::Op::OpISubBorrow, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUMulExtended, Instruction{"OpUMulExtended", spv::Op::OpUMulExtended, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSMulExtended, Instruction{"OpSMulExtended", spv::Op::OpSMulExtended, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAny, Instruction{"OpAny", spv::Op::OpAny, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAll, Instruction{"OpAll", spv::Op::OpAll, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsNan, Instruction{"OpIsNan", spv::Op::OpIsNan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsInf, Instruction{"OpIsInf", spv::Op::OpIsInf, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsFinite, Instruction{"OpIsFinite", spv::Op::OpIsFinite, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsNormal, Instruction{"OpIsNormal", spv::Op::OpIsNormal, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSignBitSet, Instruction{"OpSignBitSet", spv::Op::OpSignBitSet, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLessOrGreater, Instruction{"OpLessOrGreater", spv::Op::OpLessOrGreater, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpOrdered, Instruction{"OpOrdered", spv::Op::OpOrdered, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUnordered, Instruction{"OpUnordered", spv::Op::OpUnordered, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLogicalEqual, Instruction{"OpLogicalEqual", spv::Op::OpLogicalEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLogicalNotEqual, Instruction{"OpLogicalNotEqual", spv::Op::OpLogicalNotEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLogicalOr, Instruction{"OpLogicalOr", spv::Op::OpLogicalOr, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLogicalAnd, Instruction{"OpLogicalAnd", spv::Op::OpLogicalAnd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLogicalNot, Instruction{"OpLogicalNot", spv::Op::OpLogicalNot, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSelect, Instruction{"OpSelect", spv::Op::OpSelect, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIEqual, Instruction{"OpIEqual", spv::Op::OpIEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpINotEqual, Instruction{"OpINotEqual", spv::Op::OpINotEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUGreaterThan, Instruction{"OpUGreaterThan", spv::Op::OpUGreaterThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSGreaterThan, Instruction{"OpSGreaterThan", spv::Op::OpSGreaterThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUGreaterThanEqual, Instruction{"OpUGreaterThanEqual", spv::Op::OpUGreaterThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSGreaterThanEqual, Instruction{"OpSGreaterThanEqual", spv::Op::OpSGreaterThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpULessThan, Instruction{"OpULessThan", spv::Op::OpULessThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSLessThan, Instruction{"OpSLessThan", spv::Op::OpSLessThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpULessThanEqual, Instruction{"OpULessThanEqual", spv::Op::OpULessThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSLessThanEqual, Instruction{"OpSLessThanEqual", spv::Op::OpSLessThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdEqual, Instruction{"OpFOrdEqual", spv::Op::OpFOrdEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordEqual, Instruction{"OpFUnordEqual", spv::Op::OpFUnordEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdNotEqual, Instruction{"OpFOrdNotEqual", spv::Op::OpFOrdNotEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordNotEqual, Instruction{"OpFUnordNotEqual", spv::Op::OpFUnordNotEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdLessThan, Instruction{"OpFOrdLessThan", spv::Op::OpFOrdLessThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordLessThan, Instruction{"OpFUnordLessThan", spv::Op::OpFUnordLessThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdGreaterThan, Instruction{"OpFOrdGreaterThan", spv::Op::OpFOrdGreaterThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordGreaterThan, Instruction{"OpFUnordGreaterThan", spv::Op::OpFUnordGreaterThan, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdLessThanEqual, Instruction{"OpFOrdLessThanEqual", spv::Op::OpFOrdLessThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordLessThanEqual, Instruction{"OpFUnordLessThanEqual", spv::Op::OpFUnordLessThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFOrdGreaterThanEqual, Instruction{"OpFOrdGreaterThanEqual", spv::Op::OpFOrdGreaterThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFUnordGreaterThanEqual, Instruction{"OpFUnordGreaterThanEqual", spv::Op::OpFUnordGreaterThanEqual, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpShiftRightLogical, Instruction{"OpShiftRightLogical", spv::Op::OpShiftRightLogical, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpShiftRightArithmetic, Instruction{"OpShiftRightArithmetic", spv::Op::OpShiftRightArithmetic, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpShiftLeftLogical, Instruction{"OpShiftLeftLogical", spv::Op::OpShiftLeftLogical, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitwiseOr, Instruction{"OpBitwiseOr", spv::Op::OpBitwiseOr, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitwiseXor, Instruction{"OpBitwiseXor", spv::Op::OpBitwiseXor, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitwiseAnd, Instruction{"OpBitwiseAnd", spv::Op::OpBitwiseAnd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpNot, Instruction{"OpNot", spv::Op::OpNot, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitFieldInsert, Instruction{"OpBitFieldInsert", spv::Op::OpBitFieldInsert, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitFieldSExtract, Instruction{"OpBitFieldSExtract", spv::Op::OpBitFieldSExtract, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitFieldUExtract, Instruction{"OpBitFieldUExtract", spv::Op::OpBitFieldUExtract, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitReverse, Instruction{"OpBitReverse", spv::Op::OpBitReverse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBitCount, Instruction{"OpBitCount", spv::Op::OpBitCount, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdx, Instruction{"OpDPdx", spv::Op::OpDPdx, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdy, Instruction{"OpDPdy", spv::Op::OpDPdy, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFwidth, Instruction{"OpFwidth", spv::Op::OpFwidth, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdxFine, Instruction{"OpDPdxFine", spv::Op::OpDPdxFine, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdyFine, Instruction{"OpDPdyFine", spv::Op::OpDPdyFine, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFwidthFine, Instruction{"OpFwidthFine", spv::Op::OpFwidthFine, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdxCoarse, Instruction{"OpDPdxCoarse", spv::Op::OpDPdxCoarse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDPdyCoarse, Instruction{"OpDPdyCoarse", spv::Op::OpDPdyCoarse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFwidthCoarse, Instruction{"OpFwidthCoarse", spv::Op::OpFwidthCoarse, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEmitVertex, Instruction{"OpEmitVertex", spv::Op::OpEmitVertex, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEndPrimitive, Instruction{"OpEndPrimitive", spv::Op::OpEndPrimitive, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEmitStreamVertex, Instruction{"OpEmitStreamVertex", spv::Op::OpEmitStreamVertex, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEndStreamPrimitive, Instruction{"OpEndStreamPrimitive", spv::Op::OpEndStreamPrimitive, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpControlBarrier, Instruction{"OpControlBarrier", spv::Op::OpControlBarrier, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpMemoryBarrier, Instruction{"OpMemoryBarrier", spv::Op::OpMemoryBarrier, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicLoad, Instruction{"OpAtomicLoad", spv::Op::OpAtomicLoad, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicStore, Instruction{"OpAtomicStore", spv::Op::OpAtomicStore, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicExchange, Instruction{"OpAtomicExchange", spv::Op::OpAtomicExchange, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicCompareExchange, Instruction{"OpAtomicCompareExchange", spv::Op::OpAtomicCompareExchange, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicCompareExchangeWeak, Instruction{"OpAtomicCompareExchangeWeak", spv::Op::OpAtomicCompareExchangeWeak, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicIIncrement, Instruction{"OpAtomicIIncrement", spv::Op::OpAtomicIIncrement, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicIDecrement, Instruction{"OpAtomicIDecrement", spv::Op::OpAtomicIDecrement, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicIAdd, Instruction{"OpAtomicIAdd", spv::Op::OpAtomicIAdd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicISub, Instruction{"OpAtomicISub", spv::Op::OpAtomicISub, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicSMin, Instruction{"OpAtomicSMin", spv::Op::OpAtomicSMin, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicUMin, Instruction{"OpAtomicUMin", spv::Op::OpAtomicUMin, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicSMax, Instruction{"OpAtomicSMax", spv::Op::OpAtomicSMax, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicUMax, Instruction{"OpAtomicUMax", spv::Op::OpAtomicUMax, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicAnd, Instruction{"OpAtomicAnd", spv::Op::OpAtomicAnd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicOr, Instruction{"OpAtomicOr", spv::Op::OpAtomicOr, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicXor, Instruction{"OpAtomicXor", spv::Op::OpAtomicXor, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpPhi, Instruction{"OpPhi", spv::Op::OpPhi, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLoopMerge, Instruction{"OpLoopMerge", spv::Op::OpLoopMerge, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSelectionMerge, Instruction{"OpSelectionMerge", spv::Op::OpSelectionMerge, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLabel, Instruction{"OpLabel", spv::Op::OpLabel, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBranch, Instruction{"OpBranch", spv::Op::OpBranch, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBranchConditional, Instruction{"OpBranchConditional", spv::Op::OpBranchConditional, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSwitch, Instruction{"OpSwitch", spv::Op::OpSwitch, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpKill, Instruction{"OpKill", spv::Op::OpKill, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReturn, Instruction{"OpReturn", spv::Op::OpReturn, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReturnValue, Instruction{"OpReturnValue", spv::Op::OpReturnValue, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUnreachable, Instruction{"OpUnreachable", spv::Op::OpUnreachable, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLifetimeStart, Instruction{"OpLifetimeStart", spv::Op::OpLifetimeStart, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLifetimeStop, Instruction{"OpLifetimeStop", spv::Op::OpLifetimeStop, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupAsyncCopy, Instruction{"OpGroupAsyncCopy", spv::Op::OpGroupAsyncCopy, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupWaitEvents, Instruction{"OpGroupWaitEvents", spv::Op::OpGroupWaitEvents, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupAll, Instruction{"OpGroupAll", spv::Op::OpGroupAll, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupAny, Instruction{"OpGroupAny", spv::Op::OpGroupAny, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupBroadcast, Instruction{"OpGroupBroadcast", spv::Op::OpGroupBroadcast, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupIAdd, Instruction{"OpGroupIAdd", spv::Op::OpGroupIAdd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFAdd, Instruction{"OpGroupFAdd", spv::Op::OpGroupFAdd, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFMin, Instruction{"OpGroupFMin", spv::Op::OpGroupFMin, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupUMin, Instruction{"OpGroupUMin", spv::Op::OpGroupUMin, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupSMin, Instruction{"OpGroupSMin", spv::Op::OpGroupSMin, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFMax, Instruction{"OpGroupFMax", spv::Op::OpGroupFMax, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupUMax, Instruction{"OpGroupUMax", spv::Op::OpGroupUMax, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupSMax, Instruction{"OpGroupSMax", spv::Op::OpGroupSMax, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReadPipe, Instruction{"OpReadPipe", spv::Op::OpReadPipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpWritePipe, Instruction{"OpWritePipe", spv::Op::OpWritePipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReservedReadPipe, Instruction{"OpReservedReadPipe", spv::Op::OpReservedReadPipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReservedWritePipe, Instruction{"OpReservedWritePipe", spv::Op::OpReservedWritePipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReserveReadPipePackets, Instruction{"OpReserveReadPipePackets", spv::Op::OpReserveReadPipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReserveWritePipePackets, Instruction{"OpReserveWritePipePackets", spv::Op::OpReserveWritePipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCommitReadPipe, Instruction{"OpCommitReadPipe", spv::Op::OpCommitReadPipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCommitWritePipe, Instruction{"OpCommitWritePipe", spv::Op::OpCommitWritePipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsValidReserveId, Instruction{"OpIsValidReserveId", spv::Op::OpIsValidReserveId, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetNumPipePackets, Instruction{"OpGetNumPipePackets", spv::Op::OpGetNumPipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetMaxPipePackets, Instruction{"OpGetMaxPipePackets", spv::Op::OpGetMaxPipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupReserveReadPipePackets, Instruction{"OpGroupReserveReadPipePackets", spv::Op::OpGroupReserveReadPipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupReserveWritePipePackets, Instruction{"OpGroupReserveWritePipePackets", spv::Op::OpGroupReserveWritePipePackets, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupCommitReadPipe, Instruction{"OpGroupCommitReadPipe", spv::Op::OpGroupCommitReadPipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupCommitWritePipe, Instruction{"OpGroupCommitWritePipe", spv::Op::OpGroupCommitWritePipe, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEnqueueMarker, Instruction{"OpEnqueueMarker", spv::Op::OpEnqueueMarker, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEnqueueKernel, Instruction{"OpEnqueueKernel", spv::Op::OpEnqueueKernel, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelNDrangeSubGroupCount, Instruction{"OpGetKernelNDrangeSubGroupCount", spv::Op::OpGetKernelNDrangeSubGroupCount, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelNDrangeMaxSubGroupSize, Instruction{"OpGetKernelNDrangeMaxSubGroupSize", spv::Op::OpGetKernelNDrangeMaxSubGroupSize, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelWorkGroupSize, Instruction{"OpGetKernelWorkGroupSize", spv::Op::OpGetKernelWorkGroupSize, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelPreferredWorkGroupSizeMultiple, Instruction{"OpGetKernelPreferredWorkGroupSizeMultiple", spv::Op::OpGetKernelPreferredWorkGroupSizeMultiple, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRetainEvent, Instruction{"OpRetainEvent", spv::Op::OpRetainEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReleaseEvent, Instruction{"OpReleaseEvent", spv::Op::OpReleaseEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCreateUserEvent, Instruction{"OpCreateUserEvent", spv::Op::OpCreateUserEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsValidEvent, Instruction{"OpIsValidEvent", spv::Op::OpIsValidEvent, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSetUserEventStatus, Instruction{"OpSetUserEventStatus", spv::Op::OpSetUserEventStatus, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCaptureEventProfilingInfo, Instruction{"OpCaptureEventProfilingInfo", spv::Op::OpCaptureEventProfilingInfo, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGetDefaultQueue, Instruction{"OpGetDefaultQueue", spv::Op::OpGetDefaultQueue, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBuildNDRange, Instruction{"OpBuildNDRange", spv::Op::OpBuildNDRange, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleImplicitLod, Instruction{"OpImageSparseSampleImplicitLod", spv::Op::OpImageSparseSampleImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleExplicitLod, Instruction{"OpImageSparseSampleExplicitLod", spv::Op::OpImageSparseSampleExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleDrefImplicitLod, Instruction{"OpImageSparseSampleDrefImplicitLod", spv::Op::OpImageSparseSampleDrefImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleDrefExplicitLod, Instruction{"OpImageSparseSampleDrefExplicitLod", spv::Op::OpImageSparseSampleDrefExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleProjImplicitLod, Instruction{"OpImageSparseSampleProjImplicitLod", spv::Op::OpImageSparseSampleProjImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleProjExplicitLod, Instruction{"OpImageSparseSampleProjExplicitLod", spv::Op::OpImageSparseSampleProjExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleProjDrefImplicitLod, Instruction{"OpImageSparseSampleProjDrefImplicitLod", spv::Op::OpImageSparseSampleProjDrefImplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseSampleProjDrefExplicitLod, Instruction{"OpImageSparseSampleProjDrefExplicitLod", spv::Op::OpImageSparseSampleProjDrefExplicitLod, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseFetch, Instruction{"OpImageSparseFetch", spv::Op::OpImageSparseFetch, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseGather, Instruction{"OpImageSparseGather", spv::Op::OpImageSparseGather, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseDrefGather, Instruction{"OpImageSparseDrefGather", spv::Op::OpImageSparseDrefGather, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseTexelsResident, Instruction{"OpImageSparseTexelsResident", spv::Op::OpImageSparseTexelsResident, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpNoLine, Instruction{"OpNoLine", spv::Op::OpNoLine, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicFlagTestAndSet, Instruction{"OpAtomicFlagTestAndSet", spv::Op::OpAtomicFlagTestAndSet, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAtomicFlagClear, Instruction{"OpAtomicFlagClear", spv::Op::OpAtomicFlagClear, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSparseRead, Instruction{"OpImageSparseRead", spv::Op::OpImageSparseRead, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSizeOf, Instruction{"OpSizeOf", spv::Op::OpSizeOf, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpTypePipeStorage, Instruction{"OpTypePipeStorage", spv::Op::OpTypePipeStorage, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpConstantPipeStorage, Instruction{"OpConstantPipeStorage", spv::Op::OpConstantPipeStorage, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpCreatePipeFromPipeStorage, Instruction{"OpCreatePipeFromPipeStorage", spv::Op::OpCreatePipeFromPipeStorage, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelLocalSizeForSubgroupCount, Instruction{"OpGetKernelLocalSizeForSubgroupCount", spv::Op::OpGetKernelLocalSizeForSubgroupCount, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpGetKernelMaxNumSubgroups, Instruction{"OpGetKernelMaxNumSubgroups", spv::Op::OpGetKernelMaxNumSubgroups, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpTypeNamedBarrier, Instruction{"OpTypeNamedBarrier", spv::Op::OpTypeNamedBarrier, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpNamedBarrierInitialize, Instruction{"OpNamedBarrierInitialize", spv::Op::OpNamedBarrierInitialize, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpMemoryNamedBarrier, Instruction{"OpMemoryNamedBarrier", spv::Op::OpMemoryNamedBarrier, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpModuleProcessed, Instruction{"OpModuleProcessed", spv::Op::OpModuleProcessed, _pAllocator, _pAllocator, _pAllocator, 65792});
	m_instructions.emplaceUnique(spv::Op::OpExecutionModeId, Instruction{"OpExecutionModeId", spv::Op::OpExecutionModeId, _pAllocator, _pAllocator, _pAllocator, 66048});
	m_instructions.emplaceUnique(spv::Op::OpDecorateId, Instruction{"OpDecorateId", spv::Op::OpDecorateId, _pAllocator, _pAllocator, _pAllocator, 66048});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformElect, Instruction{"OpGroupNonUniformElect", spv::Op::OpGroupNonUniformElect, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformAll, Instruction{"OpGroupNonUniformAll", spv::Op::OpGroupNonUniformAll, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformAny, Instruction{"OpGroupNonUniformAny", spv::Op::OpGroupNonUniformAny, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformAllEqual, Instruction{"OpGroupNonUniformAllEqual", spv::Op::OpGroupNonUniformAllEqual, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBroadcast, Instruction{"OpGroupNonUniformBroadcast", spv::Op::OpGroupNonUniformBroadcast, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBroadcastFirst, Instruction{"OpGroupNonUniformBroadcastFirst", spv::Op::OpGroupNonUniformBroadcastFirst, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBallot, Instruction{"OpGroupNonUniformBallot", spv::Op::OpGroupNonUniformBallot, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformInverseBallot, Instruction{"OpGroupNonUniformInverseBallot", spv::Op::OpGroupNonUniformInverseBallot, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBallotBitExtract, Instruction{"OpGroupNonUniformBallotBitExtract", spv::Op::OpGroupNonUniformBallotBitExtract, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBallotBitCount, Instruction{"OpGroupNonUniformBallotBitCount", spv::Op::OpGroupNonUniformBallotBitCount, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBallotFindLSB, Instruction{"OpGroupNonUniformBallotFindLSB", spv::Op::OpGroupNonUniformBallotFindLSB, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBallotFindMSB, Instruction{"OpGroupNonUniformBallotFindMSB", spv::Op::OpGroupNonUniformBallotFindMSB, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformShuffle, Instruction{"OpGroupNonUniformShuffle", spv::Op::OpGroupNonUniformShuffle, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformShuffleXor, Instruction{"OpGroupNonUniformShuffleXor", spv::Op::OpGroupNonUniformShuffleXor, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformShuffleUp, Instruction{"OpGroupNonUniformShuffleUp", spv::Op::OpGroupNonUniformShuffleUp, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformShuffleDown, Instruction{"OpGroupNonUniformShuffleDown", spv::Op::OpGroupNonUniformShuffleDown, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformIAdd, Instruction{"OpGroupNonUniformIAdd", spv::Op::OpGroupNonUniformIAdd, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformFAdd, Instruction{"OpGroupNonUniformFAdd", spv::Op::OpGroupNonUniformFAdd, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformIMul, Instruction{"OpGroupNonUniformIMul", spv::Op::OpGroupNonUniformIMul, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformFMul, Instruction{"OpGroupNonUniformFMul", spv::Op::OpGroupNonUniformFMul, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformSMin, Instruction{"OpGroupNonUniformSMin", spv::Op::OpGroupNonUniformSMin, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformUMin, Instruction{"OpGroupNonUniformUMin", spv::Op::OpGroupNonUniformUMin, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformFMin, Instruction{"OpGroupNonUniformFMin", spv::Op::OpGroupNonUniformFMin, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformSMax, Instruction{"OpGroupNonUniformSMax", spv::Op::OpGroupNonUniformSMax, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformUMax, Instruction{"OpGroupNonUniformUMax", spv::Op::OpGroupNonUniformUMax, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformFMax, Instruction{"OpGroupNonUniformFMax", spv::Op::OpGroupNonUniformFMax, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBitwiseAnd, Instruction{"OpGroupNonUniformBitwiseAnd", spv::Op::OpGroupNonUniformBitwiseAnd, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBitwiseOr, Instruction{"OpGroupNonUniformBitwiseOr", spv::Op::OpGroupNonUniformBitwiseOr, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformBitwiseXor, Instruction{"OpGroupNonUniformBitwiseXor", spv::Op::OpGroupNonUniformBitwiseXor, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformLogicalAnd, Instruction{"OpGroupNonUniformLogicalAnd", spv::Op::OpGroupNonUniformLogicalAnd, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformLogicalOr, Instruction{"OpGroupNonUniformLogicalOr", spv::Op::OpGroupNonUniformLogicalOr, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformLogicalXor, Instruction{"OpGroupNonUniformLogicalXor", spv::Op::OpGroupNonUniformLogicalXor, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformQuadBroadcast, Instruction{"OpGroupNonUniformQuadBroadcast", spv::Op::OpGroupNonUniformQuadBroadcast, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformQuadSwap, Instruction{"OpGroupNonUniformQuadSwap", spv::Op::OpGroupNonUniformQuadSwap, _pAllocator, _pAllocator, _pAllocator, 66304});
	m_instructions.emplaceUnique(spv::Op::OpCopyLogical, Instruction{"OpCopyLogical", spv::Op::OpCopyLogical, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpPtrEqual, Instruction{"OpPtrEqual", spv::Op::OpPtrEqual, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpPtrNotEqual, Instruction{"OpPtrNotEqual", spv::Op::OpPtrNotEqual, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpPtrDiff, Instruction{"OpPtrDiff", spv::Op::OpPtrDiff, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupBallotKHR, Instruction{"OpSubgroupBallotKHR", spv::Op::OpSubgroupBallotKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupFirstInvocationKHR, Instruction{"OpSubgroupFirstInvocationKHR", spv::Op::OpSubgroupFirstInvocationKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAllKHR, Instruction{"OpSubgroupAllKHR", spv::Op::OpSubgroupAllKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAnyKHR, Instruction{"OpSubgroupAnyKHR", spv::Op::OpSubgroupAnyKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAllEqualKHR, Instruction{"OpSubgroupAllEqualKHR", spv::Op::OpSubgroupAllEqualKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupReadInvocationKHR, Instruction{"OpSubgroupReadInvocationKHR", spv::Op::OpSubgroupReadInvocationKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeRayQueryProvisionalKHR, Instruction{"OpTypeRayQueryProvisionalKHR", spv::Op::OpTypeRayQueryProvisionalKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryInitializeKHR, Instruction{"OpRayQueryInitializeKHR", spv::Op::OpRayQueryInitializeKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryTerminateKHR, Instruction{"OpRayQueryTerminateKHR", spv::Op::OpRayQueryTerminateKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGenerateIntersectionKHR, Instruction{"OpRayQueryGenerateIntersectionKHR", spv::Op::OpRayQueryGenerateIntersectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryConfirmIntersectionKHR, Instruction{"OpRayQueryConfirmIntersectionKHR", spv::Op::OpRayQueryConfirmIntersectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryProceedKHR, Instruction{"OpRayQueryProceedKHR", spv::Op::OpRayQueryProceedKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionTypeKHR, Instruction{"OpRayQueryGetIntersectionTypeKHR", spv::Op::OpRayQueryGetIntersectionTypeKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupIAddNonUniformAMD, Instruction{"OpGroupIAddNonUniformAMD", spv::Op::OpGroupIAddNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFAddNonUniformAMD, Instruction{"OpGroupFAddNonUniformAMD", spv::Op::OpGroupFAddNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFMinNonUniformAMD, Instruction{"OpGroupFMinNonUniformAMD", spv::Op::OpGroupFMinNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupUMinNonUniformAMD, Instruction{"OpGroupUMinNonUniformAMD", spv::Op::OpGroupUMinNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupSMinNonUniformAMD, Instruction{"OpGroupSMinNonUniformAMD", spv::Op::OpGroupSMinNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupFMaxNonUniformAMD, Instruction{"OpGroupFMaxNonUniformAMD", spv::Op::OpGroupFMaxNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupUMaxNonUniformAMD, Instruction{"OpGroupUMaxNonUniformAMD", spv::Op::OpGroupUMaxNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupSMaxNonUniformAMD, Instruction{"OpGroupSMaxNonUniformAMD", spv::Op::OpGroupSMaxNonUniformAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFragmentMaskFetchAMD, Instruction{"OpFragmentMaskFetchAMD", spv::Op::OpFragmentMaskFetchAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFragmentFetchAMD, Instruction{"OpFragmentFetchAMD", spv::Op::OpFragmentFetchAMD, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReadClockKHR, Instruction{"OpReadClockKHR", spv::Op::OpReadClockKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpImageSampleFootprintNV, Instruction{"OpImageSampleFootprintNV", spv::Op::OpImageSampleFootprintNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpGroupNonUniformPartitionNV, Instruction{"OpGroupNonUniformPartitionNV", spv::Op::OpGroupNonUniformPartitionNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpWritePackedPrimitiveIndices4x8NV, Instruction{"OpWritePackedPrimitiveIndices4x8NV", spv::Op::OpWritePackedPrimitiveIndices4x8NV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReportIntersectionNV, Instruction{"OpReportIntersectionNV", spv::Op::OpReportIntersectionNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReportIntersectionKHR, Instruction{"OpReportIntersectionKHR", spv::Op::OpReportIntersectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIgnoreIntersectionNV, Instruction{"OpIgnoreIntersectionNV", spv::Op::OpIgnoreIntersectionNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIgnoreIntersectionKHR, Instruction{"OpIgnoreIntersectionKHR", spv::Op::OpIgnoreIntersectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTerminateRayNV, Instruction{"OpTerminateRayNV", spv::Op::OpTerminateRayNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTerminateRayKHR, Instruction{"OpTerminateRayKHR", spv::Op::OpTerminateRayKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTraceNV, Instruction{"OpTraceNV", spv::Op::OpTraceNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTraceRayKHR, Instruction{"OpTraceRayKHR", spv::Op::OpTraceRayKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAccelerationStructureNV, Instruction{"OpTypeAccelerationStructureNV", spv::Op::OpTypeAccelerationStructureNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAccelerationStructureKHR, Instruction{"OpTypeAccelerationStructureKHR", spv::Op::OpTypeAccelerationStructureKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExecuteCallableNV, Instruction{"OpExecuteCallableNV", spv::Op::OpExecuteCallableNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpExecuteCallableKHR, Instruction{"OpExecuteCallableKHR", spv::Op::OpExecuteCallableKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeCooperativeMatrixNV, Instruction{"OpTypeCooperativeMatrixNV", spv::Op::OpTypeCooperativeMatrixNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCooperativeMatrixLoadNV, Instruction{"OpCooperativeMatrixLoadNV", spv::Op::OpCooperativeMatrixLoadNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCooperativeMatrixStoreNV, Instruction{"OpCooperativeMatrixStoreNV", spv::Op::OpCooperativeMatrixStoreNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCooperativeMatrixMulAddNV, Instruction{"OpCooperativeMatrixMulAddNV", spv::Op::OpCooperativeMatrixMulAddNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpCooperativeMatrixLengthNV, Instruction{"OpCooperativeMatrixLengthNV", spv::Op::OpCooperativeMatrixLengthNV, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpBeginInvocationInterlockEXT, Instruction{"OpBeginInvocationInterlockEXT", spv::Op::OpBeginInvocationInterlockEXT, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpEndInvocationInterlockEXT, Instruction{"OpEndInvocationInterlockEXT", spv::Op::OpEndInvocationInterlockEXT, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDemoteToHelperInvocationEXT, Instruction{"OpDemoteToHelperInvocationEXT", spv::Op::OpDemoteToHelperInvocationEXT, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIsHelperInvocationEXT, Instruction{"OpIsHelperInvocationEXT", spv::Op::OpIsHelperInvocationEXT, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupShuffleINTEL, Instruction{"OpSubgroupShuffleINTEL", spv::Op::OpSubgroupShuffleINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupShuffleDownINTEL, Instruction{"OpSubgroupShuffleDownINTEL", spv::Op::OpSubgroupShuffleDownINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupShuffleUpINTEL, Instruction{"OpSubgroupShuffleUpINTEL", spv::Op::OpSubgroupShuffleUpINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupShuffleXorINTEL, Instruction{"OpSubgroupShuffleXorINTEL", spv::Op::OpSubgroupShuffleXorINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupBlockReadINTEL, Instruction{"OpSubgroupBlockReadINTEL", spv::Op::OpSubgroupBlockReadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupBlockWriteINTEL, Instruction{"OpSubgroupBlockWriteINTEL", spv::Op::OpSubgroupBlockWriteINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupImageBlockReadINTEL, Instruction{"OpSubgroupImageBlockReadINTEL", spv::Op::OpSubgroupImageBlockReadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupImageBlockWriteINTEL, Instruction{"OpSubgroupImageBlockWriteINTEL", spv::Op::OpSubgroupImageBlockWriteINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupImageMediaBlockReadINTEL, Instruction{"OpSubgroupImageMediaBlockReadINTEL", spv::Op::OpSubgroupImageMediaBlockReadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupImageMediaBlockWriteINTEL, Instruction{"OpSubgroupImageMediaBlockWriteINTEL", spv::Op::OpSubgroupImageMediaBlockWriteINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUCountLeadingZerosINTEL, Instruction{"OpUCountLeadingZerosINTEL", spv::Op::OpUCountLeadingZerosINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUCountTrailingZerosINTEL, Instruction{"OpUCountTrailingZerosINTEL", spv::Op::OpUCountTrailingZerosINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAbsISubINTEL, Instruction{"OpAbsISubINTEL", spv::Op::OpAbsISubINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpAbsUSubINTEL, Instruction{"OpAbsUSubINTEL", spv::Op::OpAbsUSubINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIAddSatINTEL, Instruction{"OpIAddSatINTEL", spv::Op::OpIAddSatINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUAddSatINTEL, Instruction{"OpUAddSatINTEL", spv::Op::OpUAddSatINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIAverageINTEL, Instruction{"OpIAverageINTEL", spv::Op::OpIAverageINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUAverageINTEL, Instruction{"OpUAverageINTEL", spv::Op::OpUAverageINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIAverageRoundedINTEL, Instruction{"OpIAverageRoundedINTEL", spv::Op::OpIAverageRoundedINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUAverageRoundedINTEL, Instruction{"OpUAverageRoundedINTEL", spv::Op::OpUAverageRoundedINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpISubSatINTEL, Instruction{"OpISubSatINTEL", spv::Op::OpISubSatINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUSubSatINTEL, Instruction{"OpUSubSatINTEL", spv::Op::OpUSubSatINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpIMul32x16INTEL, Instruction{"OpIMul32x16INTEL", spv::Op::OpIMul32x16INTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpUMul32x16INTEL, Instruction{"OpUMul32x16INTEL", spv::Op::OpUMul32x16INTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunctionPointerINTEL, Instruction{"OpFunctionPointerINTEL", spv::Op::OpFunctionPointerINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFunctionPointerCallINTEL, Instruction{"OpFunctionPointerCallINTEL", spv::Op::OpFunctionPointerCallINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpDecorateString, Instruction{"OpDecorateString", spv::Op::OpDecorateString, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpDecorateStringGOOGLE, Instruction{"OpDecorateStringGOOGLE", spv::Op::OpDecorateStringGOOGLE, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpMemberDecorateString, Instruction{"OpMemberDecorateString", spv::Op::OpMemberDecorateString, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpMemberDecorateStringGOOGLE, Instruction{"OpMemberDecorateStringGOOGLE", spv::Op::OpMemberDecorateStringGOOGLE, _pAllocator, _pAllocator, _pAllocator, 66560});
	m_instructions.emplaceUnique(spv::Op::OpVmeImageINTEL, Instruction{"OpVmeImageINTEL", spv::Op::OpVmeImageINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeVmeImageINTEL, Instruction{"OpTypeVmeImageINTEL", spv::Op::OpTypeVmeImageINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImePayloadINTEL, Instruction{"OpTypeAvcImePayloadINTEL", spv::Op::OpTypeAvcImePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcRefPayloadINTEL, Instruction{"OpTypeAvcRefPayloadINTEL", spv::Op::OpTypeAvcRefPayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcSicPayloadINTEL, Instruction{"OpTypeAvcSicPayloadINTEL", spv::Op::OpTypeAvcSicPayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcMcePayloadINTEL, Instruction{"OpTypeAvcMcePayloadINTEL", spv::Op::OpTypeAvcMcePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcMceResultINTEL, Instruction{"OpTypeAvcMceResultINTEL", spv::Op::OpTypeAvcMceResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImeResultINTEL, Instruction{"OpTypeAvcImeResultINTEL", spv::Op::OpTypeAvcImeResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImeResultSingleReferenceStreamoutINTEL, Instruction{"OpTypeAvcImeResultSingleReferenceStreamoutINTEL", spv::Op::OpTypeAvcImeResultSingleReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImeResultDualReferenceStreamoutINTEL, Instruction{"OpTypeAvcImeResultDualReferenceStreamoutINTEL", spv::Op::OpTypeAvcImeResultDualReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImeSingleReferenceStreaminINTEL, Instruction{"OpTypeAvcImeSingleReferenceStreaminINTEL", spv::Op::OpTypeAvcImeSingleReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcImeDualReferenceStreaminINTEL, Instruction{"OpTypeAvcImeDualReferenceStreaminINTEL", spv::Op::OpTypeAvcImeDualReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcRefResultINTEL, Instruction{"OpTypeAvcRefResultINTEL", spv::Op::OpTypeAvcRefResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpTypeAvcSicResultINTEL, Instruction{"OpTypeAvcSicResultINTEL", spv::Op::OpTypeAvcSicResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL, Instruction{"OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL", spv::Op::OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetInterShapePenaltyINTEL, Instruction{"OpSubgroupAvcMceSetInterShapePenaltyINTEL", spv::Op::OpSubgroupAvcMceSetInterShapePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetInterDirectionPenaltyINTEL, Instruction{"OpSubgroupAvcMceSetInterDirectionPenaltyINTEL", spv::Op::OpSubgroupAvcMceSetInterDirectionPenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL, Instruction{"OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL", spv::Op::OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL, Instruction{"OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL", spv::Op::OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL, Instruction{"OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL", spv::Op::OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL, Instruction{"OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL", spv::Op::OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL, Instruction{"OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL", spv::Op::OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL, Instruction{"OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL", spv::Op::OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetAcOnlyHaarINTEL, Instruction{"OpSubgroupAvcMceSetAcOnlyHaarINTEL", spv::Op::OpSubgroupAvcMceSetAcOnlyHaarINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL, Instruction{"OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL", spv::Op::OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL, Instruction{"OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL", spv::Op::OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL, Instruction{"OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL", spv::Op::OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToImePayloadINTEL, Instruction{"OpSubgroupAvcMceConvertToImePayloadINTEL", spv::Op::OpSubgroupAvcMceConvertToImePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToImeResultINTEL, Instruction{"OpSubgroupAvcMceConvertToImeResultINTEL", spv::Op::OpSubgroupAvcMceConvertToImeResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToRefPayloadINTEL, Instruction{"OpSubgroupAvcMceConvertToRefPayloadINTEL", spv::Op::OpSubgroupAvcMceConvertToRefPayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToRefResultINTEL, Instruction{"OpSubgroupAvcMceConvertToRefResultINTEL", spv::Op::OpSubgroupAvcMceConvertToRefResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToSicPayloadINTEL, Instruction{"OpSubgroupAvcMceConvertToSicPayloadINTEL", spv::Op::OpSubgroupAvcMceConvertToSicPayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceConvertToSicResultINTEL, Instruction{"OpSubgroupAvcMceConvertToSicResultINTEL", spv::Op::OpSubgroupAvcMceConvertToSicResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetMotionVectorsINTEL, Instruction{"OpSubgroupAvcMceGetMotionVectorsINTEL", spv::Op::OpSubgroupAvcMceGetMotionVectorsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterDistortionsINTEL, Instruction{"OpSubgroupAvcMceGetInterDistortionsINTEL", spv::Op::OpSubgroupAvcMceGetInterDistortionsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetBestInterDistortionsINTEL, Instruction{"OpSubgroupAvcMceGetBestInterDistortionsINTEL", spv::Op::OpSubgroupAvcMceGetBestInterDistortionsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterMajorShapeINTEL, Instruction{"OpSubgroupAvcMceGetInterMajorShapeINTEL", spv::Op::OpSubgroupAvcMceGetInterMajorShapeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterMinorShapeINTEL, Instruction{"OpSubgroupAvcMceGetInterMinorShapeINTEL", spv::Op::OpSubgroupAvcMceGetInterMinorShapeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterDirectionsINTEL, Instruction{"OpSubgroupAvcMceGetInterDirectionsINTEL", spv::Op::OpSubgroupAvcMceGetInterDirectionsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterMotionVectorCountINTEL, Instruction{"OpSubgroupAvcMceGetInterMotionVectorCountINTEL", spv::Op::OpSubgroupAvcMceGetInterMotionVectorCountINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterReferenceIdsINTEL, Instruction{"OpSubgroupAvcMceGetInterReferenceIdsINTEL", spv::Op::OpSubgroupAvcMceGetInterReferenceIdsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL, Instruction{"OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL", spv::Op::OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeInitializeINTEL, Instruction{"OpSubgroupAvcImeInitializeINTEL", spv::Op::OpSubgroupAvcImeInitializeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetSingleReferenceINTEL, Instruction{"OpSubgroupAvcImeSetSingleReferenceINTEL", spv::Op::OpSubgroupAvcImeSetSingleReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetDualReferenceINTEL, Instruction{"OpSubgroupAvcImeSetDualReferenceINTEL", spv::Op::OpSubgroupAvcImeSetDualReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeRefWindowSizeINTEL, Instruction{"OpSubgroupAvcImeRefWindowSizeINTEL", spv::Op::OpSubgroupAvcImeRefWindowSizeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeAdjustRefOffsetINTEL, Instruction{"OpSubgroupAvcImeAdjustRefOffsetINTEL", spv::Op::OpSubgroupAvcImeAdjustRefOffsetINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeConvertToMcePayloadINTEL, Instruction{"OpSubgroupAvcImeConvertToMcePayloadINTEL", spv::Op::OpSubgroupAvcImeConvertToMcePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetMaxMotionVectorCountINTEL, Instruction{"OpSubgroupAvcImeSetMaxMotionVectorCountINTEL", spv::Op::OpSubgroupAvcImeSetMaxMotionVectorCountINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL, Instruction{"OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL", spv::Op::OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL, Instruction{"OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL", spv::Op::OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeSetWeightedSadINTEL, Instruction{"OpSubgroupAvcImeSetWeightedSadINTEL", spv::Op::OpSubgroupAvcImeSetWeightedSadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithDualReferenceINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL, Instruction{"OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL", spv::Op::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeConvertToMceResultINTEL, Instruction{"OpSubgroupAvcImeConvertToMceResultINTEL", spv::Op::OpSubgroupAvcImeConvertToMceResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetSingleReferenceStreaminINTEL, Instruction{"OpSubgroupAvcImeGetSingleReferenceStreaminINTEL", spv::Op::OpSubgroupAvcImeGetSingleReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetDualReferenceStreaminINTEL, Instruction{"OpSubgroupAvcImeGetDualReferenceStreaminINTEL", spv::Op::OpSubgroupAvcImeGetDualReferenceStreaminINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL, Instruction{"OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL", spv::Op::OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeStripDualReferenceStreamoutINTEL, Instruction{"OpSubgroupAvcImeStripDualReferenceStreamoutINTEL", spv::Op::OpSubgroupAvcImeStripDualReferenceStreamoutINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL, Instruction{"OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL", spv::Op::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetBorderReachedINTEL, Instruction{"OpSubgroupAvcImeGetBorderReachedINTEL", spv::Op::OpSubgroupAvcImeGetBorderReachedINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL, Instruction{"OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL", spv::Op::OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL, Instruction{"OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL", spv::Op::OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL, Instruction{"OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL", spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL, Instruction{"OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL", spv::Op::OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcFmeInitializeINTEL, Instruction{"OpSubgroupAvcFmeInitializeINTEL", spv::Op::OpSubgroupAvcFmeInitializeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcBmeInitializeINTEL, Instruction{"OpSubgroupAvcBmeInitializeINTEL", spv::Op::OpSubgroupAvcBmeInitializeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefConvertToMcePayloadINTEL, Instruction{"OpSubgroupAvcRefConvertToMcePayloadINTEL", spv::Op::OpSubgroupAvcRefConvertToMcePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefSetBidirectionalMixDisableINTEL, Instruction{"OpSubgroupAvcRefSetBidirectionalMixDisableINTEL", spv::Op::OpSubgroupAvcRefSetBidirectionalMixDisableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefSetBilinearFilterEnableINTEL, Instruction{"OpSubgroupAvcRefSetBilinearFilterEnableINTEL", spv::Op::OpSubgroupAvcRefSetBilinearFilterEnableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL, Instruction{"OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL", spv::Op::OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefEvaluateWithDualReferenceINTEL, Instruction{"OpSubgroupAvcRefEvaluateWithDualReferenceINTEL", spv::Op::OpSubgroupAvcRefEvaluateWithDualReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL, Instruction{"OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL", spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL, Instruction{"OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL", spv::Op::OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcRefConvertToMceResultINTEL, Instruction{"OpSubgroupAvcRefConvertToMceResultINTEL", spv::Op::OpSubgroupAvcRefConvertToMceResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicInitializeINTEL, Instruction{"OpSubgroupAvcSicInitializeINTEL", spv::Op::OpSubgroupAvcSicInitializeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicConfigureSkcINTEL, Instruction{"OpSubgroupAvcSicConfigureSkcINTEL", spv::Op::OpSubgroupAvcSicConfigureSkcINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicConfigureIpeLumaINTEL, Instruction{"OpSubgroupAvcSicConfigureIpeLumaINTEL", spv::Op::OpSubgroupAvcSicConfigureIpeLumaINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicConfigureIpeLumaChromaINTEL, Instruction{"OpSubgroupAvcSicConfigureIpeLumaChromaINTEL", spv::Op::OpSubgroupAvcSicConfigureIpeLumaChromaINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetMotionVectorMaskINTEL, Instruction{"OpSubgroupAvcSicGetMotionVectorMaskINTEL", spv::Op::OpSubgroupAvcSicGetMotionVectorMaskINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicConvertToMcePayloadINTEL, Instruction{"OpSubgroupAvcSicConvertToMcePayloadINTEL", spv::Op::OpSubgroupAvcSicConvertToMcePayloadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL, Instruction{"OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL", spv::Op::OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL, Instruction{"OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL", spv::Op::OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL, Instruction{"OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL", spv::Op::OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetBilinearFilterEnableINTEL, Instruction{"OpSubgroupAvcSicSetBilinearFilterEnableINTEL", spv::Op::OpSubgroupAvcSicSetBilinearFilterEnableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL, Instruction{"OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL", spv::Op::OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL, Instruction{"OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL", spv::Op::OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicEvaluateIpeINTEL, Instruction{"OpSubgroupAvcSicEvaluateIpeINTEL", spv::Op::OpSubgroupAvcSicEvaluateIpeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL, Instruction{"OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL", spv::Op::OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicEvaluateWithDualReferenceINTEL, Instruction{"OpSubgroupAvcSicEvaluateWithDualReferenceINTEL", spv::Op::OpSubgroupAvcSicEvaluateWithDualReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL, Instruction{"OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL", spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL, Instruction{"OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL", spv::Op::OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicConvertToMceResultINTEL, Instruction{"OpSubgroupAvcSicConvertToMceResultINTEL", spv::Op::OpSubgroupAvcSicConvertToMceResultINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetIpeLumaShapeINTEL, Instruction{"OpSubgroupAvcSicGetIpeLumaShapeINTEL", spv::Op::OpSubgroupAvcSicGetIpeLumaShapeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL, Instruction{"OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL", spv::Op::OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL, Instruction{"OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL", spv::Op::OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetPackedIpeLumaModesINTEL, Instruction{"OpSubgroupAvcSicGetPackedIpeLumaModesINTEL", spv::Op::OpSubgroupAvcSicGetPackedIpeLumaModesINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetIpeChromaModeINTEL, Instruction{"OpSubgroupAvcSicGetIpeChromaModeINTEL", spv::Op::OpSubgroupAvcSicGetIpeChromaModeINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL, Instruction{"OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL", spv::Op::OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL, Instruction{"OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL", spv::Op::OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpSubgroupAvcSicGetInterRawSadsINTEL, Instruction{"OpSubgroupAvcSicGetInterRawSadsINTEL", spv::Op::OpSubgroupAvcSicGetInterRawSadsINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpLoopControlINTEL, Instruction{"OpLoopControlINTEL", spv::Op::OpLoopControlINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpReadPipeBlockingINTEL, Instruction{"OpReadPipeBlockingINTEL", spv::Op::OpReadPipeBlockingINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpWritePipeBlockingINTEL, Instruction{"OpWritePipeBlockingINTEL", spv::Op::OpWritePipeBlockingINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpFPGARegINTEL, Instruction{"OpFPGARegINTEL", spv::Op::OpFPGARegINTEL, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetRayTMinKHR, Instruction{"OpRayQueryGetRayTMinKHR", spv::Op::OpRayQueryGetRayTMinKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetRayFlagsKHR, Instruction{"OpRayQueryGetRayFlagsKHR", spv::Op::OpRayQueryGetRayFlagsKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionTKHR, Instruction{"OpRayQueryGetIntersectionTKHR", spv::Op::OpRayQueryGetIntersectionTKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionInstanceCustomIndexKHR, Instruction{"OpRayQueryGetIntersectionInstanceCustomIndexKHR", spv::Op::OpRayQueryGetIntersectionInstanceCustomIndexKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionInstanceIdKHR, Instruction{"OpRayQueryGetIntersectionInstanceIdKHR", spv::Op::OpRayQueryGetIntersectionInstanceIdKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR, Instruction{"OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR", spv::Op::OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionGeometryIndexKHR, Instruction{"OpRayQueryGetIntersectionGeometryIndexKHR", spv::Op::OpRayQueryGetIntersectionGeometryIndexKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionPrimitiveIndexKHR, Instruction{"OpRayQueryGetIntersectionPrimitiveIndexKHR", spv::Op::OpRayQueryGetIntersectionPrimitiveIndexKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionBarycentricsKHR, Instruction{"OpRayQueryGetIntersectionBarycentricsKHR", spv::Op::OpRayQueryGetIntersectionBarycentricsKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionFrontFaceKHR, Instruction{"OpRayQueryGetIntersectionFrontFaceKHR", spv::Op::OpRayQueryGetIntersectionFrontFaceKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionCandidateAABBOpaqueKHR, Instruction{"OpRayQueryGetIntersectionCandidateAABBOpaqueKHR", spv::Op::OpRayQueryGetIntersectionCandidateAABBOpaqueKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionObjectRayDirectionKHR, Instruction{"OpRayQueryGetIntersectionObjectRayDirectionKHR", spv::Op::OpRayQueryGetIntersectionObjectRayDirectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionObjectRayOriginKHR, Instruction{"OpRayQueryGetIntersectionObjectRayOriginKHR", spv::Op::OpRayQueryGetIntersectionObjectRayOriginKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetWorldRayDirectionKHR, Instruction{"OpRayQueryGetWorldRayDirectionKHR", spv::Op::OpRayQueryGetWorldRayDirectionKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetWorldRayOriginKHR, Instruction{"OpRayQueryGetWorldRayOriginKHR", spv::Op::OpRayQueryGetWorldRayOriginKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionObjectToWorldKHR, Instruction{"OpRayQueryGetIntersectionObjectToWorldKHR", spv::Op::OpRayQueryGetIntersectionObjectToWorldKHR, _pAllocator, _pAllocator, _pAllocator, 0});
	m_instructions.emplaceUnique(spv::Op::OpRayQueryGetIntersectionWorldToObjectKHR, Instruction{"OpRayQueryGetIntersectionWorldToObjectKHR", spv::Op::OpRayQueryGetIntersectionWorldToObjectKHR, _pAllocator, _pAllocator, _pAllocator, 0});
};
