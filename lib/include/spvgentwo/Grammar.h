// Auto generated - do not modify
#pragma once

#include "Vector.h"
#include "HashMap.h"
#include "Spv.h"

namespace spvgentwo
{
class Grammar
{
	public:
	enum class Extension : unsigned short
	{
		Core = 0,
		Glsl = 1,
		OpenCl = 2,
	};
	enum class OperandCategory : unsigned short
	{
		BitEnum,
		ValueEnum,
		Id,
		Literal,
		Composite,
	};
	enum class OperandKind : unsigned short
	{
		ImageOperands,
		FPFastMathMode,
		SelectionControl,
		LoopControl,
		FunctionControl,
		MemorySemantics,
		MemoryAccess,
		KernelProfilingInfo,
		RayFlags,
		SourceLanguage,
		ExecutionModel,
		AddressingModel,
		MemoryModel,
		ExecutionMode,
		StorageClass,
		Dim,
		SamplerAddressingMode,
		SamplerFilterMode,
		ImageFormat,
		ImageChannelOrder,
		ImageChannelDataType,
		FPRoundingMode,
		LinkageType,
		AccessQualifier,
		FunctionParameterAttribute,
		Decoration,
		BuiltIn,
		Scope,
		GroupOperation,
		KernelEnqueueFlags,
		Capability,
		RayQueryIntersection,
		RayQueryCommittedIntersectionType,
		RayQueryCandidateIntersectionType,
		IdResultType,
		IdResult,
		IdMemorySemantics,
		IdScope,
		IdRef,
		LiteralInteger,
		LiteralString,
		LiteralContextDependentNumber,
		LiteralExtInstInteger,
		LiteralSpecConstantOpInteger,
		PairLiteralIntegerIdRef,
		PairIdRefLiteralInteger,
		PairIdRefIdRef,
	};
	static constexpr const char* ImageOperandsNames[] =
	{
		"None",
		"Bias",
		"Lod",
		"Grad",
		"ConstOffset",
		"Offset",
		"ConstOffsets",
		"Sample",
		"MinLod",
		"MakeTexelAvailable",
		"MakeTexelAvailableKHR",
		"MakeTexelVisible",
		"MakeTexelVisibleKHR",
		"NonPrivateTexel",
		"NonPrivateTexelKHR",
		"VolatileTexel",
		"VolatileTexelKHR",
		"SignExtend",
		"ZeroExtend",
	};
	static constexpr const char* FPFastMathModeNames[] =
	{
		"None",
		"NotNaN",
		"NotInf",
		"NSZ",
		"AllowRecip",
		"Fast",
	};
	static constexpr const char* SelectionControlNames[] =
	{
		"None",
		"Flatten",
		"DontFlatten",
	};
	static constexpr const char* LoopControlNames[] =
	{
		"None",
		"Unroll",
		"DontUnroll",
		"DependencyInfinite",
		"DependencyLength",
		"MinIterations",
		"MaxIterations",
		"IterationMultiple",
		"PeelCount",
		"PartialCount",
		"InitiationIntervalINTEL",
		"MaxConcurrencyINTEL",
		"DependencyArrayINTEL",
		"PipelineEnableINTEL",
		"LoopCoalesceINTEL",
		"MaxInterleavingINTEL",
		"SpeculatedIterationsINTEL",
	};
	static constexpr const char* FunctionControlNames[] =
	{
		"None",
		"Inline",
		"DontInline",
		"Pure",
		"Const",
	};
	static constexpr const char* MemorySemanticsNames[] =
	{
		"Relaxed",
		"None",
		"Acquire",
		"Release",
		"AcquireRelease",
		"SequentiallyConsistent",
		"UniformMemory",
		"SubgroupMemory",
		"WorkgroupMemory",
		"CrossWorkgroupMemory",
		"AtomicCounterMemory",
		"ImageMemory",
		"OutputMemory",
		"OutputMemoryKHR",
		"MakeAvailable",
		"MakeAvailableKHR",
		"MakeVisible",
		"MakeVisibleKHR",
		"Volatile",
	};
	static constexpr const char* MemoryAccessNames[] =
	{
		"None",
		"Volatile",
		"Aligned",
		"Nontemporal",
		"MakePointerAvailable",
		"MakePointerAvailableKHR",
		"MakePointerVisible",
		"MakePointerVisibleKHR",
		"NonPrivatePointer",
		"NonPrivatePointerKHR",
	};
	static constexpr const char* KernelProfilingInfoNames[] =
	{
		"None",
		"CmdExecTime",
	};
	static constexpr const char* RayFlagsNames[] =
	{
		"NoneKHR",
		"OpaqueKHR",
		"NoOpaqueKHR",
		"TerminateOnFirstHitKHR",
		"SkipClosestHitShaderKHR",
		"CullBackFacingTrianglesKHR",
		"CullFrontFacingTrianglesKHR",
		"CullOpaqueKHR",
		"CullNoOpaqueKHR",
		"SkipTrianglesKHR",
		"SkipAABBsKHR",
	};
	static constexpr const char* SourceLanguageNames[] =
	{
		"Unknown",
		"ESSL",
		"GLSL",
		"OpenCL_C",
		"OpenCL_CPP",
		"HLSL",
	};
	static constexpr const char* ExecutionModelNames[] =
	{
		"Vertex",
		"TessellationControl",
		"TessellationEvaluation",
		"Geometry",
		"Fragment",
		"GLCompute",
		"Kernel",
		"TaskNV",
		"MeshNV",
		"RayGenerationNV",
		"RayGenerationKHR",
		"IntersectionNV",
		"IntersectionKHR",
		"AnyHitNV",
		"AnyHitKHR",
		"ClosestHitNV",
		"ClosestHitKHR",
		"MissNV",
		"MissKHR",
		"CallableNV",
		"CallableKHR",
	};
	static constexpr const char* AddressingModelNames[] =
	{
		"Logical",
		"Physical32",
		"Physical64",
		"PhysicalStorageBuffer64",
		"PhysicalStorageBuffer64EXT",
	};
	static constexpr const char* MemoryModelNames[] =
	{
		"Simple",
		"GLSL450",
		"OpenCL",
		"Vulkan",
		"VulkanKHR",
	};
	static constexpr const char* ExecutionModeNames[] =
	{
		"Invocations",
		"SpacingEqual",
		"SpacingFractionalEven",
		"SpacingFractionalOdd",
		"VertexOrderCw",
		"VertexOrderCcw",
		"PixelCenterInteger",
		"OriginUpperLeft",
		"OriginLowerLeft",
		"EarlyFragmentTests",
		"PointMode",
		"Xfb",
		"DepthReplacing",
		"DepthGreater",
		"DepthLess",
		"DepthUnchanged",
		"LocalSize",
		"LocalSizeHint",
		"InputPoints",
		"InputLines",
		"InputLinesAdjacency",
		"Triangles",
		"InputTrianglesAdjacency",
		"Quads",
		"Isolines",
		"OutputVertices",
		"OutputPoints",
		"OutputLineStrip",
		"OutputTriangleStrip",
		"VecTypeHint",
		"ContractionOff",
		"Initializer",
		"Finalizer",
		"SubgroupSize",
		"SubgroupsPerWorkgroup",
		"SubgroupsPerWorkgroupId",
		"LocalSizeId",
		"LocalSizeHintId",
		"PostDepthCoverage",
		"DenormPreserve",
		"DenormFlushToZero",
		"SignedZeroInfNanPreserve",
		"RoundingModeRTE",
		"RoundingModeRTZ",
		"StencilRefReplacingEXT",
		"OutputLinesNV",
		"OutputPrimitivesNV",
		"DerivativeGroupQuadsNV",
		"DerivativeGroupLinearNV",
		"OutputTrianglesNV",
		"PixelInterlockOrderedEXT",
		"PixelInterlockUnorderedEXT",
		"SampleInterlockOrderedEXT",
		"SampleInterlockUnorderedEXT",
		"ShadingRateInterlockOrderedEXT",
		"ShadingRateInterlockUnorderedEXT",
		"MaxWorkgroupSizeINTEL",
		"MaxWorkDimINTEL",
		"NoGlobalOffsetINTEL",
		"NumSIMDWorkitemsINTEL",
	};
	static constexpr const char* StorageClassNames[] =
	{
		"UniformConstant",
		"Input",
		"Uniform",
		"Output",
		"Workgroup",
		"CrossWorkgroup",
		"Private",
		"Function",
		"Generic",
		"PushConstant",
		"AtomicCounter",
		"Image",
		"StorageBuffer",
		"CallableDataNV",
		"CallableDataKHR",
		"IncomingCallableDataNV",
		"IncomingCallableDataKHR",
		"RayPayloadNV",
		"RayPayloadKHR",
		"HitAttributeNV",
		"HitAttributeKHR",
		"IncomingRayPayloadNV",
		"IncomingRayPayloadKHR",
		"ShaderRecordBufferNV",
		"ShaderRecordBufferKHR",
		"PhysicalStorageBuffer",
		"PhysicalStorageBufferEXT",
		"CodeSectionINTEL",
	};
	static constexpr const char* DimNames[] =
	{
		"Dim1D",
		"Dim2D",
		"Dim3D",
		"Cube",
		"Rect",
		"Buffer",
		"SubpassData",
	};
	static constexpr const char* SamplerAddressingModeNames[] =
	{
		"None",
		"ClampToEdge",
		"Clamp",
		"Repeat",
		"RepeatMirrored",
	};
	static constexpr const char* SamplerFilterModeNames[] =
	{
		"Nearest",
		"Linear",
	};
	static constexpr const char* ImageFormatNames[] =
	{
		"Unknown",
		"Rgba32f",
		"Rgba16f",
		"R32f",
		"Rgba8",
		"Rgba8Snorm",
		"Rg32f",
		"Rg16f",
		"R11fG11fB10f",
		"R16f",
		"Rgba16",
		"Rgb10A2",
		"Rg16",
		"Rg8",
		"R16",
		"R8",
		"Rgba16Snorm",
		"Rg16Snorm",
		"Rg8Snorm",
		"R16Snorm",
		"R8Snorm",
		"Rgba32i",
		"Rgba16i",
		"Rgba8i",
		"R32i",
		"Rg32i",
		"Rg16i",
		"Rg8i",
		"R16i",
		"R8i",
		"Rgba32ui",
		"Rgba16ui",
		"Rgba8ui",
		"R32ui",
		"Rgb10a2ui",
		"Rg32ui",
		"Rg16ui",
		"Rg8ui",
		"R16ui",
		"R8ui",
	};
	static constexpr const char* ImageChannelOrderNames[] =
	{
		"R",
		"A",
		"RG",
		"RA",
		"RGB",
		"RGBA",
		"BGRA",
		"ARGB",
		"Intensity",
		"Luminance",
		"Rx",
		"RGx",
		"RGBx",
		"Depth",
		"DepthStencil",
		"sRGB",
		"sRGBx",
		"sRGBA",
		"sBGRA",
		"ABGR",
	};
	static constexpr const char* ImageChannelDataTypeNames[] =
	{
		"SnormInt8",
		"SnormInt16",
		"UnormInt8",
		"UnormInt16",
		"UnormShort565",
		"UnormShort555",
		"UnormInt101010",
		"SignedInt8",
		"SignedInt16",
		"SignedInt32",
		"UnsignedInt8",
		"UnsignedInt16",
		"UnsignedInt32",
		"HalfFloat",
		"Float",
		"UnormInt24",
		"UnormInt101010_2",
	};
	static constexpr const char* FPRoundingModeNames[] =
	{
		"RTE",
		"RTZ",
		"RTP",
		"RTN",
	};
	static constexpr const char* LinkageTypeNames[] =
	{
		"Export",
		"Import",
	};
	static constexpr const char* AccessQualifierNames[] =
	{
		"ReadOnly",
		"WriteOnly",
		"ReadWrite",
	};
	static constexpr const char* FunctionParameterAttributeNames[] =
	{
		"Zext",
		"Sext",
		"ByVal",
		"Sret",
		"NoAlias",
		"NoCapture",
		"NoWrite",
		"NoReadWrite",
	};
	static constexpr const char* DecorationNames[] =
	{
		"RelaxedPrecision",
		"SpecId",
		"Block",
		"BufferBlock",
		"RowMajor",
		"ColMajor",
		"ArrayStride",
		"MatrixStride",
		"GLSLShared",
		"GLSLPacked",
		"CPacked",
		"BuiltIn",
		"NoPerspective",
		"Flat",
		"Patch",
		"Centroid",
		"Sample",
		"Invariant",
		"Restrict",
		"Aliased",
		"Volatile",
		"Constant",
		"Coherent",
		"NonWritable",
		"NonReadable",
		"Uniform",
		"UniformId",
		"SaturatedConversion",
		"Stream",
		"Location",
		"Component",
		"Index",
		"Binding",
		"DescriptorSet",
		"Offset",
		"XfbBuffer",
		"XfbStride",
		"FuncParamAttr",
		"FPRoundingMode",
		"FPFastMathMode",
		"LinkageAttributes",
		"NoContraction",
		"InputAttachmentIndex",
		"Alignment",
		"MaxByteOffset",
		"AlignmentId",
		"MaxByteOffsetId",
		"NoSignedWrap",
		"NoUnsignedWrap",
		"ExplicitInterpAMD",
		"OverrideCoverageNV",
		"PassthroughNV",
		"ViewportRelativeNV",
		"SecondaryViewportRelativeNV",
		"PerPrimitiveNV",
		"PerViewNV",
		"PerTaskNV",
		"PerVertexNV",
		"NonUniform",
		"NonUniformEXT",
		"RestrictPointer",
		"RestrictPointerEXT",
		"AliasedPointer",
		"AliasedPointerEXT",
		"ReferencedIndirectlyINTEL",
		"CounterBuffer",
		"HlslCounterBufferGOOGLE",
		"UserSemantic",
		"HlslSemanticGOOGLE",
		"UserTypeGOOGLE",
		"RegisterINTEL",
		"MemoryINTEL",
		"NumbanksINTEL",
		"BankwidthINTEL",
		"MaxPrivateCopiesINTEL",
		"SinglepumpINTEL",
		"DoublepumpINTEL",
		"MaxReplicatesINTEL",
		"SimpleDualPortINTEL",
		"MergeINTEL",
		"BankBitsINTEL",
		"ForcePow2DepthINTEL",
	};
	static constexpr const char* BuiltInNames[] =
	{
		"Position",
		"PointSize",
		"ClipDistance",
		"CullDistance",
		"VertexId",
		"InstanceId",
		"PrimitiveId",
		"InvocationId",
		"Layer",
		"ViewportIndex",
		"TessLevelOuter",
		"TessLevelInner",
		"TessCoord",
		"PatchVertices",
		"FragCoord",
		"PointCoord",
		"FrontFacing",
		"SampleId",
		"SamplePosition",
		"SampleMask",
		"FragDepth",
		"HelperInvocation",
		"NumWorkgroups",
		"WorkgroupSize",
		"WorkgroupId",
		"LocalInvocationId",
		"GlobalInvocationId",
		"LocalInvocationIndex",
		"WorkDim",
		"GlobalSize",
		"EnqueuedWorkgroupSize",
		"GlobalOffset",
		"GlobalLinearId",
		"SubgroupSize",
		"SubgroupMaxSize",
		"NumSubgroups",
		"NumEnqueuedSubgroups",
		"SubgroupId",
		"SubgroupLocalInvocationId",
		"VertexIndex",
		"InstanceIndex",
		"SubgroupEqMask",
		"SubgroupGeMask",
		"SubgroupGtMask",
		"SubgroupLeMask",
		"SubgroupLtMask",
		"SubgroupEqMaskKHR",
		"SubgroupGeMaskKHR",
		"SubgroupGtMaskKHR",
		"SubgroupLeMaskKHR",
		"SubgroupLtMaskKHR",
		"BaseVertex",
		"BaseInstance",
		"DrawIndex",
		"DeviceIndex",
		"ViewIndex",
		"BaryCoordNoPerspAMD",
		"BaryCoordNoPerspCentroidAMD",
		"BaryCoordNoPerspSampleAMD",
		"BaryCoordSmoothAMD",
		"BaryCoordSmoothCentroidAMD",
		"BaryCoordSmoothSampleAMD",
		"BaryCoordPullModelAMD",
		"FragStencilRefEXT",
		"ViewportMaskNV",
		"SecondaryPositionNV",
		"SecondaryViewportMaskNV",
		"PositionPerViewNV",
		"ViewportMaskPerViewNV",
		"FullyCoveredEXT",
		"TaskCountNV",
		"PrimitiveCountNV",
		"PrimitiveIndicesNV",
		"ClipDistancePerViewNV",
		"CullDistancePerViewNV",
		"LayerPerViewNV",
		"MeshViewCountNV",
		"MeshViewIndicesNV",
		"BaryCoordNV",
		"BaryCoordNoPerspNV",
		"FragSizeEXT",
		"FragmentSizeNV",
		"FragInvocationCountEXT",
		"InvocationsPerPixelNV",
		"LaunchIdNV",
		"LaunchIdKHR",
		"LaunchSizeNV",
		"LaunchSizeKHR",
		"WorldRayOriginNV",
		"WorldRayOriginKHR",
		"WorldRayDirectionNV",
		"WorldRayDirectionKHR",
		"ObjectRayOriginNV",
		"ObjectRayOriginKHR",
		"ObjectRayDirectionNV",
		"ObjectRayDirectionKHR",
		"RayTminNV",
		"RayTminKHR",
		"RayTmaxNV",
		"RayTmaxKHR",
		"InstanceCustomIndexNV",
		"InstanceCustomIndexKHR",
		"ObjectToWorldNV",
		"ObjectToWorldKHR",
		"WorldToObjectNV",
		"WorldToObjectKHR",
		"HitTNV",
		"HitTKHR",
		"HitKindNV",
		"HitKindKHR",
		"IncomingRayFlagsNV",
		"IncomingRayFlagsKHR",
		"RayGeometryIndexKHR",
		"WarpsPerSMNV",
		"SMCountNV",
		"WarpIDNV",
		"SMIDNV",
	};
	static constexpr const char* ScopeNames[] =
	{
		"CrossDevice",
		"Device",
		"Workgroup",
		"Subgroup",
		"Invocation",
		"QueueFamily",
		"QueueFamilyKHR",
		"ShaderCallKHR",
	};
	static constexpr const char* GroupOperationNames[] =
	{
		"Reduce",
		"InclusiveScan",
		"ExclusiveScan",
		"ClusteredReduce",
		"PartitionedReduceNV",
		"PartitionedInclusiveScanNV",
		"PartitionedExclusiveScanNV",
	};
	static constexpr const char* KernelEnqueueFlagsNames[] =
	{
		"NoWait",
		"WaitKernel",
		"WaitWorkGroup",
	};
	static constexpr const char* CapabilityNames[] =
	{
		"Matrix",
		"Shader",
		"Geometry",
		"Tessellation",
		"Addresses",
		"Linkage",
		"Kernel",
		"Vector16",
		"Float16Buffer",
		"Float16",
		"Float64",
		"Int64",
		"Int64Atomics",
		"ImageBasic",
		"ImageReadWrite",
		"ImageMipmap",
		"Pipes",
		"Groups",
		"DeviceEnqueue",
		"LiteralSampler",
		"AtomicStorage",
		"Int16",
		"TessellationPointSize",
		"GeometryPointSize",
		"ImageGatherExtended",
		"StorageImageMultisample",
		"UniformBufferArrayDynamicIndexing",
		"SampledImageArrayDynamicIndexing",
		"StorageBufferArrayDynamicIndexing",
		"StorageImageArrayDynamicIndexing",
		"ClipDistance",
		"CullDistance",
		"ImageCubeArray",
		"SampleRateShading",
		"ImageRect",
		"SampledRect",
		"GenericPointer",
		"Int8",
		"InputAttachment",
		"SparseResidency",
		"MinLod",
		"Sampled1D",
		"Image1D",
		"SampledCubeArray",
		"SampledBuffer",
		"ImageBuffer",
		"ImageMSArray",
		"StorageImageExtendedFormats",
		"ImageQuery",
		"DerivativeControl",
		"InterpolationFunction",
		"TransformFeedback",
		"GeometryStreams",
		"StorageImageReadWithoutFormat",
		"StorageImageWriteWithoutFormat",
		"MultiViewport",
		"SubgroupDispatch",
		"NamedBarrier",
		"PipeStorage",
		"GroupNonUniform",
		"GroupNonUniformVote",
		"GroupNonUniformArithmetic",
		"GroupNonUniformBallot",
		"GroupNonUniformShuffle",
		"GroupNonUniformShuffleRelative",
		"GroupNonUniformClustered",
		"GroupNonUniformQuad",
		"ShaderLayer",
		"ShaderViewportIndex",
		"SubgroupBallotKHR",
		"DrawParameters",
		"SubgroupVoteKHR",
		"StorageBuffer16BitAccess",
		"StorageUniformBufferBlock16",
		"UniformAndStorageBuffer16BitAccess",
		"StorageUniform16",
		"StoragePushConstant16",
		"StorageInputOutput16",
		"DeviceGroup",
		"MultiView",
		"VariablePointersStorageBuffer",
		"VariablePointers",
		"AtomicStorageOps",
		"SampleMaskPostDepthCoverage",
		"StorageBuffer8BitAccess",
		"UniformAndStorageBuffer8BitAccess",
		"StoragePushConstant8",
		"DenormPreserve",
		"DenormFlushToZero",
		"SignedZeroInfNanPreserve",
		"RoundingModeRTE",
		"RoundingModeRTZ",
		"RayQueryProvisionalKHR",
		"RayTraversalPrimitiveCullingProvisionalKHR",
		"Float16ImageAMD",
		"ImageGatherBiasLodAMD",
		"FragmentMaskAMD",
		"StencilExportEXT",
		"ImageReadWriteLodAMD",
		"ShaderClockKHR",
		"SampleMaskOverrideCoverageNV",
		"GeometryShaderPassthroughNV",
		"ShaderViewportIndexLayerEXT",
		"ShaderViewportIndexLayerNV",
		"ShaderViewportMaskNV",
		"ShaderStereoViewNV",
		"PerViewAttributesNV",
		"FragmentFullyCoveredEXT",
		"MeshShadingNV",
		"ImageFootprintNV",
		"FragmentBarycentricNV",
		"ComputeDerivativeGroupQuadsNV",
		"FragmentDensityEXT",
		"ShadingRateNV",
		"GroupNonUniformPartitionedNV",
		"ShaderNonUniform",
		"ShaderNonUniformEXT",
		"RuntimeDescriptorArray",
		"RuntimeDescriptorArrayEXT",
		"InputAttachmentArrayDynamicIndexing",
		"InputAttachmentArrayDynamicIndexingEXT",
		"UniformTexelBufferArrayDynamicIndexing",
		"UniformTexelBufferArrayDynamicIndexingEXT",
		"StorageTexelBufferArrayDynamicIndexing",
		"StorageTexelBufferArrayDynamicIndexingEXT",
		"UniformBufferArrayNonUniformIndexing",
		"UniformBufferArrayNonUniformIndexingEXT",
		"SampledImageArrayNonUniformIndexing",
		"SampledImageArrayNonUniformIndexingEXT",
		"StorageBufferArrayNonUniformIndexing",
		"StorageBufferArrayNonUniformIndexingEXT",
		"StorageImageArrayNonUniformIndexing",
		"StorageImageArrayNonUniformIndexingEXT",
		"InputAttachmentArrayNonUniformIndexing",
		"InputAttachmentArrayNonUniformIndexingEXT",
		"UniformTexelBufferArrayNonUniformIndexing",
		"UniformTexelBufferArrayNonUniformIndexingEXT",
		"StorageTexelBufferArrayNonUniformIndexing",
		"StorageTexelBufferArrayNonUniformIndexingEXT",
		"RayTracingNV",
		"VulkanMemoryModel",
		"VulkanMemoryModelKHR",
		"VulkanMemoryModelDeviceScope",
		"VulkanMemoryModelDeviceScopeKHR",
		"PhysicalStorageBufferAddresses",
		"PhysicalStorageBufferAddressesEXT",
		"ComputeDerivativeGroupLinearNV",
		"RayTracingProvisionalKHR",
		"CooperativeMatrixNV",
		"FragmentShaderSampleInterlockEXT",
		"FragmentShaderShadingRateInterlockEXT",
		"ShaderSMBuiltinsNV",
		"FragmentShaderPixelInterlockEXT",
		"DemoteToHelperInvocationEXT",
		"SubgroupShuffleINTEL",
		"SubgroupBufferBlockIOINTEL",
		"SubgroupImageBlockIOINTEL",
		"SubgroupImageMediaBlockIOINTEL",
		"IntegerFunctions2INTEL",
		"FunctionPointersINTEL",
		"IndirectReferencesINTEL",
		"SubgroupAvcMotionEstimationINTEL",
		"SubgroupAvcMotionEstimationIntraINTEL",
		"SubgroupAvcMotionEstimationChromaINTEL",
		"FPGAMemoryAttributesINTEL",
		"UnstructuredLoopControlsINTEL",
		"FPGALoopControlsINTEL",
		"KernelAttributesINTEL",
		"FPGAKernelAttributesINTEL",
		"BlockingPipesINTEL",
		"FPGARegINTEL",
	};
	static constexpr const char* RayQueryIntersectionNames[] =
	{
		"RayQueryCandidateIntersectionKHR",
		"RayQueryCommittedIntersectionKHR",
	};
	static constexpr const char* RayQueryCommittedIntersectionTypeNames[] =
	{
		"RayQueryCommittedIntersectionNoneKHR",
		"RayQueryCommittedIntersectionTriangleKHR",
		"RayQueryCommittedIntersectionGeneratedKHR",
	};
	static constexpr const char* RayQueryCandidateIntersectionTypeNames[] =
	{
		"RayQueryCandidateIntersectionTriangleKHR",
		"RayQueryCandidateIntersectionAABBKHR",
	};
	static constexpr const char* const* OperandKindNames[] =
	{
		ImageOperandsNames,
		FPFastMathModeNames,
		SelectionControlNames,
		LoopControlNames,
		FunctionControlNames,
		MemorySemanticsNames,
		MemoryAccessNames,
		KernelProfilingInfoNames,
		RayFlagsNames,
		SourceLanguageNames,
		ExecutionModelNames,
		AddressingModelNames,
		MemoryModelNames,
		ExecutionModeNames,
		StorageClassNames,
		DimNames,
		SamplerAddressingModeNames,
		SamplerFilterModeNames,
		ImageFormatNames,
		ImageChannelOrderNames,
		ImageChannelDataTypeNames,
		FPRoundingModeNames,
		LinkageTypeNames,
		AccessQualifierNames,
		FunctionParameterAttributeNames,
		DecorationNames,
		BuiltInNames,
		ScopeNames,
		GroupOperationNames,
		KernelEnqueueFlagsNames,
		CapabilityNames,
		RayQueryIntersectionNames,
		RayQueryCommittedIntersectionTypeNames,
		RayQueryCandidateIntersectionTypeNames,
	};
	enum class Quantifier
	{
		ZeroOrOne, // zero or one
		ZeroOrAny, // zero or any
		One, // exactly once
	};
	struct Operand
	{
		OperandKind kind;
		OperandCategory category;
		const char* name;
		Quantifier quantifier;
	};
	struct Instruction
	{
		const char* name;
		Vector<Operand> operands;
		Vector<spv::Capability> capabilities;
		Vector<spv::Extension> extensions;
		unsigned int version;
	};
		Grammar(IAllocator* _pAllocator);
		const Instruction* getInfo(unsigned int _opcode, Extension _extension = Extension::Core) const;
	private:
		HashMap<Hash64, Instruction> m_instructions;
};
} // spvgentwo
